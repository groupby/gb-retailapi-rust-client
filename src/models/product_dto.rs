/*
 * GroupBy Retail
 *
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0
 * Contact: ops@groupbyinc.com
 * Generated by: https://openapi-generator.tech
 */

/// ProductDto : Product representation.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProductDto {
    /// Relative path to product in Google Retail system.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Product id in Google Retail system.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Product type. Possible values: PRIMARY, VARIANT. If the product has variant list and the request specifies the variantIds, requested variants will be the first in the response.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    /// Product ID that is primary in relation to the current one
    #[serde(rename = "primaryProductId", skip_serializing_if = "Option::is_none")]
    pub primary_product_id: Option<String>,
    /// The of the collection members when product type is COLLECTION
    #[serde(rename = "collectionMemberIds", skip_serializing_if = "Option::is_none")]
    pub collection_member_ids: Option<Vec<String>>,
    /// Global Trade Item Number can be used by a company to uniquely identify all of its trade items.GTIN defines trade items as products or services that are priced, ordered or invoiced at any point in the supply chain.
    #[serde(rename = "gtin", skip_serializing_if = "Option::is_none")]
    pub gtin: Option<String>,
    /// Product categories (array).
    #[serde(rename = "categories", skip_serializing_if = "Option::is_none")]
    pub categories: Option<Vec<String>>,
    /// Product title.
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// Product brands.
    #[serde(rename = "brands", skip_serializing_if = "Option::is_none")]
    pub brands: Option<Vec<String>>,
    /// Product description.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Language of the title/description and other string attributes. Use language tags defined by [BCP 47][https://www.rfc-editor.org/rfc/bcp/bcp47.txt]. For product search this field is in use. It defaults to 'en-US' if unset.
    #[serde(rename = "languageCode", skip_serializing_if = "Option::is_none")]
    pub language_code: Option<String>,
    /// Highly encouraged. Extra product attributes to be included. For example, for products, this could include the store name, vendor, style, color, etc. These are very strong signals for recommendation model, thus we highly recommend providing the attributes here. Features that can take on one of a limited number of possible values. Two types of features can be set are: Textual features. some examples would be the brand/maker of a product, or country of a customer. Numerical features. Some examples would be the height/weight of a product, or age of a customer.  Max entries count: 200. Length limit of 128 characters.
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<::std::collections::HashMap<String, crate::models::ProductCustomAttribute>>,
    /// Product tags (array).
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    #[serde(rename = "priceInfo", skip_serializing_if = "Option::is_none")]
    pub price_info: Option<Box<crate::models::ProductDtoPriceInfo>>,
    #[serde(rename = "rating", skip_serializing_if = "Option::is_none")]
    pub rating: Option<Box<crate::models::ProductDtoRating>>,
    #[serde(rename = "availableTime", skip_serializing_if = "Option::is_none")]
    pub available_time: Option<Box<crate::models::ProductDtoAvailableTime>>,
    /// The online availability of the product. Default to IN_STOCK
    #[serde(rename = "availability", skip_serializing_if = "Option::is_none")]
    pub availability: Option<String>,
    /// The available quantity of the item.
    #[serde(rename = "availableQuantity", skip_serializing_if = "Option::is_none")]
    pub available_quantity: Option<i32>,
    /// Fulfillment information, such as the store IDs for in-store pickup or region IDs for different shipping methods.
    #[serde(rename = "fulfillmentInfos", skip_serializing_if = "Option::is_none")]
    pub fulfillment_infos: Option<Vec<crate::models::FulfillmentInfo>>,
    /// Link to the appropriate product.
    #[serde(rename = "uri", skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
    /// Product Image.
    #[serde(rename = "images", skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<crate::models::Image>>,
    #[serde(rename = "audience", skip_serializing_if = "Option::is_none")]
    pub audience: Option<Box<crate::models::ProductDtoAudience>>,
    #[serde(rename = "colorInfo", skip_serializing_if = "Option::is_none")]
    pub color_info: Option<Box<crate::models::ProductDtoColorInfo>>,
    /// Product sizes (array).
    #[serde(rename = "sizes", skip_serializing_if = "Option::is_none")]
    pub sizes: Option<Vec<String>>,
    /// The material of the product. For example, 'leather', 'wooden'. A maximum of 20 values are allowed. Length limit of 128 characters
    #[serde(rename = "materials", skip_serializing_if = "Option::is_none")]
    pub materials: Option<Vec<String>>,
    /// The pattern or graphic print of the product. For example, 'striped', 'polka dot', 'paisley'. A maximum of 20 values are allowed per product. Length limit of 128 characters.
    #[serde(rename = "patterns", skip_serializing_if = "Option::is_none")]
    pub patterns: Option<Vec<String>>,
    /// The condition of the product. Strongly encouraged to use the standardvalues: 'new', 'refurbished', 'used'. A maximum of 5 values are allowed per product. Length limit of 128 characters.
    #[serde(rename = "conditions", skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<String>>,
    #[serde(rename = "publishTime", skip_serializing_if = "Option::is_none")]
    pub publish_time: Option<Box<crate::models::ProductDtoPublishTime>>,
    #[serde(rename = "retrievableFields", skip_serializing_if = "Option::is_none")]
    pub retrievable_fields: Option<Box<crate::models::ProductDtoRetrievableFields>>,
    /// The promotions applied to the product. A maximum of 10 values are allowed per product.
    #[serde(rename = "promotions", skip_serializing_if = "Option::is_none")]
    pub promotions: Option<Vec<crate::models::Promotion>>,
    /// If the product has variant list and the request specifies the variantIds, requested variants will be the first in the response.
    #[serde(rename = "variants", skip_serializing_if = "Option::is_none")]
    pub variants: Option<Vec<crate::models::ProductDto>>,
}

impl ProductDto {
    /// Product representation.
    pub fn new() -> ProductDto {
        ProductDto {
            name: None,
            id: None,
            r#type: None,
            primary_product_id: None,
            collection_member_ids: None,
            gtin: None,
            categories: None,
            title: None,
            brands: None,
            description: None,
            language_code: None,
            attributes: None,
            tags: None,
            price_info: None,
            rating: None,
            available_time: None,
            availability: None,
            available_quantity: None,
            fulfillment_infos: None,
            uri: None,
            images: None,
            audience: None,
            color_info: None,
            sizes: None,
            materials: None,
            patterns: None,
            conditions: None,
            publish_time: None,
            retrievable_fields: None,
            promotions: None,
            variants: None,
        }
    }
}


