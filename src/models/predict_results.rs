/*
 * GroupBy Retail
 *
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: ops@groupbyinc.com
 * Generated by: https://openapi-generator.tech
 */

/// PredictResults : Prediction result including list of recommendations based on provided inputs.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PredictResults {
    /// Warnings collected with validation and Recommendations AI API issues.
    #[serde(rename = "warnings", skip_serializing_if = "Option::is_none")]
    pub warnings: Option<Vec<serde_json::Value>>,
    /// Recommendations built by Recommendations AI model.
    #[serde(rename = "products", skip_serializing_if = "Option::is_none")]
    pub products: Option<Vec<::std::collections::HashMap<String, serde_json::Value>>>,
    /// Recommendations built by Recommendations AI model.
    #[serde(rename = "records", skip_serializing_if = "Option::is_none")]
    pub records: Option<Vec<::std::collections::HashMap<String, serde_json::Value>>>,
    /// Model Id used for predictions
    #[serde(rename = "modelId", skip_serializing_if = "Option::is_none")]
    pub model_id: Option<String>,
    /// Model Name used for predictions
    #[serde(rename = "modelName", skip_serializing_if = "Option::is_none")]
    pub model_name: Option<String>,
    ///   Currently supported values:   `recommended-for-you`   `others-you-may-like`,   `frequently-bought-together`   `page-optimization`   `similar-items`,   `buy-it-again`   `on-sale-items`   `recently-viewed`    This field together with optimization_objective describe model metadata to use to control model training and   serving. See https://cloud.google.com/retail/docs/models for more details. 
    #[serde(rename = "modelType", skip_serializing_if = "Option::is_none")]
    pub model_type: Option<String>,
    ///   Currently supported values: `ctr`, `cvr`, `revenue-per-order`.     If not specified, we choose default based on model type. Default depends on type of recommendation:   `recommended-for-you` => `ctr`   `others-you-may-like` => `ctr`   `frequently-bought-together` => `revenue_per_order`    This field together with modelType describe model metadata to use to control model training and serving.   See https://cloud.google.com/retail/docs/models for more details on what the model metadata control and which   combination of parameters are valid. 
    #[serde(rename = "optimizationObjective", skip_serializing_if = "Option::is_none")]
    pub optimization_objective: Option<String>,
    /// Filter set applied to the recommendation
    #[serde(rename = "filterSet", skip_serializing_if = "Option::is_none")]
    pub filter_set: Option<String>,
    /// RawFilter applied to the recommendation
    #[serde(rename = "rawFilter", skip_serializing_if = "Option::is_none")]
    pub raw_filter: Option<String>,
    /// Filters applied to the recommendation
    #[serde(rename = "filters", skip_serializing_if = "Option::is_none")]
    pub filters: Option<Vec<crate::models::FilterParameter>>,
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Box<serde_json::Value>>,
}

impl PredictResults {
    /// Prediction result including list of recommendations based on provided inputs.
    pub fn new() -> PredictResults {
        PredictResults {
            warnings: None,
            products: None,
            records: None,
            model_id: None,
            model_name: None,
            model_type: None,
            optimization_objective: None,
            filter_set: None,
            raw_filter: None,
            filters: None,
            metadata: None,
        }
    }
}


