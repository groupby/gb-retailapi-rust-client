/*
 * GroupBy Retail
 *
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0
 * Contact: ops@groupbyinc.com
 * Generated by: https://openapi-generator.tech
 */

/// RecommendationsRequest : Object to wrap all recommendation request configs.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecommendationsRequest {
    #[serde(rename = "collection")]
    pub collection: String,
    #[serde(rename = "visitorId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub visitor_id: Option<Option<String>>,
    #[serde(rename = "limit", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub limit: Option<Option<String>>,
    #[serde(rename = "pageSize", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub page_size: Option<Option<String>>,
    #[serde(rename = "eventType", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub event_type: Option<Option<String>>,
    #[serde(rename = "loginId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub login_id: Option<Option<String>>,
    #[serde(rename = "productID", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub product_id: Option<Option<Vec<String>>>,
    #[serde(rename = "fields", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fields: Option<Option<Vec<String>>>,
    #[serde(rename = "filters", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub filters: Option<Option<Vec<crate::models::Filter>>>,
    #[serde(rename = "rawFilter", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub raw_filter: Option<Option<String>>,
    #[serde(rename = "placement", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub placement: Option<Option<String>>,
    #[serde(rename = "name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    /// The default is true. If strictFiltering true only products that are within the scope of the filter specified. If false, relax the filtering so that the response may contain other products that are outside the scope of the filtering.
    #[serde(rename = "strictFiltering", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub strict_filtering: Option<Option<bool>>,
}

impl RecommendationsRequest {
    /// Object to wrap all recommendation request configs.
    pub fn new(collection: String) -> RecommendationsRequest {
        RecommendationsRequest {
            collection,
            visitor_id: None,
            limit: None,
            page_size: None,
            event_type: None,
            login_id: None,
            product_id: None,
            fields: None,
            filters: None,
            raw_filter: None,
            placement: None,
            name: None,
            strict_filtering: None,
        }
    }
}


